name: Build & Publish Daily Podcast

on:
  workflow_dispatch:
    inputs:
      publish_only:
        description: "Skip build; only publish last artifacts (if available)"
        default: "false"
        type: choice
        options: ["false", "true"]
  schedule:
    - cron: "0 12 * * *"  # daily at 12:00 UTC

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  VOICE_NAME: en_US-hfc_male-medium
  PIPER_VOICE_PATH: voices/en_US-hfc_male-medium.onnx
  TAG_NAME: episode-${{ github.run_id }}

jobs:
  build:
    if: ${{ inputs.publish_only != 'true' }}  # allow publish-only runs
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ env.TAG_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg espeak-ng

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install piper-tts
          python -m pip install lxml_html_clean

      # Cache the Piper voice so we don't re-download every run
      - name: Cache Piper voice
        id: cache-voice
        uses: actions/cache@v4
        with:
          path: voices
          key: ${{ runner.os }}-piper-voice-${{ env.VOICE_NAME }}

      - name: Download Piper voice (if cache miss)
        if: steps.cache-voice.outputs.cache-hit != 'true'
        run: |
          mkdir -p voices
          python -m piper.download_voices $VOICE_NAME --download-dir voices
          ls -lh voices

      - name: Set Piper env
        run: |
          echo "PIPER_VOICE=$PWD/${{ env.PIPER_VOICE_PATH }}" >> $GITHUB_ENV
          echo "PIPER_BIN=$(which piper)" >> $GITHUB_ENV

      - name: Build Podcast (script + TTS + notes.html)
        if: steps.maybe-skip.outputs.skip_build == 'false'
        env:
          GMAIL_CLIENT_ID:     ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
          GMAIL_LABEL:         ${{ secrets.GMAIL_LABEL }}
          PODCAST_TITLE:       ${{ secrets.PODCAST_TITLE }}
          PODCAST_DESCRIPTION: ${{ secrets.PODCAST_DESCRIPTION }}
          LLM_PROVIDER:        ${{ secrets.LLM_PROVIDER }}         # e.g. "gemini"
          GEMINI_API_KEY:      ${{ secrets.GEMINI_API_KEY }}       # if using Gemini
          OPENAI_API_KEY:      ${{ secrets.OPENAI_API_KEY }}       # if using OpenAI
        run: |
          mkdir -p output
          PYTHONPATH=. python3 src/main.py \
            --piper "$PIPER_BIN" \
            --voice "$PIPER_VOICE" \
            --prompt_file prompts/host_style.txt \
            --llm_full_text

      - name: Upload build artifacts
        if: steps.maybe-skip.outputs.skip_build == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: podcast-output
          path: |
            output/
            feed.xml

      - name: Create GitHub Release with MP3
        if: steps.maybe-skip.outputs.skip_build == 'false'
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: output/episode.mp3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update RSS feed (title = Month Day Year, desc = notes.html)
        if: steps.maybe-skip.outputs.skip_build == 'false'
        env:
          GITHUB_REPOSITORY:   ${{ github.repository }}
          PODCAST_TITLE:       ${{ secrets.PODCAST_TITLE }}
          PODCAST_DESCRIPTION: ${{ secrets.PODCAST_DESCRIPTION }}
          PODCAST_COVER_URL:   ${{ secrets.PODCAST_COVER_URL }}
          PODCAST_OWNER_NAME:  ${{ secrets.PODCAST_OWNER_NAME }}
          PODCAST_OWNER_EMAIL: ${{ secrets.PODCAST_OWNER_EMAIL }}
          PODCAST_AUTHOR:      ${{ secrets.PODCAST_AUTHOR }}
          PODCAST_CATEGORY:    ${{ secrets.PODCAST_CATEGORY }}
          PODCAST_LANG:        ${{ secrets.PODCAST_LANG }}
          # HOST_PUBLIC_BASE optional; feed.py can derive from repo
        run: |
          python -m src.feed --update --tag "${{ env.TAG_NAME }}"

      - name: Re-upload feed (after update)
        if: steps.maybe-skip.outputs.skip_build == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: podcast-feed
          path: feed.xml

  publish:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download feed artifact
        uses: actions/download-artifact@v4
        with:
          name: podcast-feed
          path: .
        continue-on-error: true

      - name: Download output artifact
        uses: actions/download-artifact@v4
        with:
          name: podcast-output
          path: output
        continue-on-error: true

      - name: Prepare feed for Pages
        run: |
          set -euo pipefail
          rm -rf public
          mkdir -p public public/latest
          # prefer feed from artifact; fallback if missing
          if [ -f feed.xml ]; then
            cp feed.xml public/feed.xml
          elif [ -f output/feed.xml ]; then
            cp output/feed.xml public/feed.xml
          else
            echo "ERROR: feed.xml not found in artifacts"; exit 1
          fi
          # optional: latest episode notes
          if [ -f output/notes.html ]; then
            cp output/notes.html public/latest/index.html
          fi
          # simple landing page
          cat > public/index.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>Fintech Daily Briefing</title>
          <h1>Fintech Daily Briefing</h1>
          <p>RSS feed: <a href="./feed.xml">feed.xml</a></p>
          <p>Latest episode notes: <a href="./latest/">latest/</a></p>
          HTML

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4