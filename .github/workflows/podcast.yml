name: Build & Publish Daily Podcast

on:
  workflow_dispatch: {}            # manual trigger
  schedule:
    - cron: "0 12 * * *"           # daily at 12:00 UTC

# Required for releases + Pages deploy
permissions:
  contents: write
  pages: write
  id-token: write

# Recommended to avoid overlapping Pages deployments
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout source
      - name: Checkout
        uses: actions/checkout@v4

      # 2) Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3) System deps
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg espeak-ng

      # 4) Cache pip
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 5) Python deps
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install piper-tts
          python -m pip install lxml_html_clean

      # 6) Download Piper voice (male, medium)
      - name: Download Piper voice (en_US-hfc_male-medium)
        run: |
          mkdir -p voices
          python -m piper.download_voices en_US-hfc_male-medium --download-dir voices
          echo "PIPER_VOICE=$PWD/voices/en_US-hfc_male-medium.onnx" >> $GITHUB_ENV
          echo "PIPER_BIN=$(which piper)" >> $GITHUB_ENV

      # 7) Build podcast (script + TTS + notes.html)
      - name: Build Podcast
        env:
          GMAIL_CLIENT_ID:     ${{ secrets.GMAIL_CLIENT_ID }}
          GMAIL_CLIENT_SECRET: ${{ secrets.GMAIL_CLIENT_SECRET }}
          GMAIL_REFRESH_TOKEN: ${{ secrets.GMAIL_REFRESH_TOKEN }}
          GMAIL_LABEL:         ${{ secrets.GMAIL_LABEL }}
          PODCAST_TITLE:       ${{ secrets.PODCAST_TITLE }}
          HOST_PUBLIC_BASE:    ${{ secrets.HOST_PUBLIC_BASE }}
          LLM_PROVIDER:        ${{ secrets.LLM_PROVIDER }}        # e.g. "gemini"
          GEMINI_API_KEY:      ${{ secrets.GEMINI_API_KEY }}      # if using Gemini
          OPENAI_API_KEY:      ${{ secrets.OPENAI_API_KEY }}      # optional if using OpenAI
        run: |
          mkdir -p output
          PYTHONPATH=. python3 src/main.py \
            --piper "$PIPER_BIN" \
            --voice "$PIPER_VOICE" \
            --prompt_file prompts/host_style.txt \
            --llm_full_text

      # 8) Upload outputs (debugging / download)
      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: podcast-output
          path: output/

      # 9) Create GitHub Release with MP3
      - name: Create GitHub Release with MP3
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "episode-${{ github.run_id }}"
          files: |
            output/episode.mp3
            output/script.md
            output/notes.html
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 9.5) Restore previous feed.xml so we append, not overwrite
      - name: Restore previous feed.xml
        run: |
          set -euo pipefail
          OWNER_REPO="${GITHUB_REPOSITORY}"        # e.g., sanchesfer/newsletter-to-podcast
          OWNER="${OWNER_REPO%%/*}"
          REPO="${OWNER_REPO#*/}"
          FEED_URL="https://${OWNER}.github.io/${REPO}/feed.xml"
          echo "Restoring feed from: $FEED_URL"
          if curl -fSL --retry 3 "$FEED_URL" -o feed.xml; then
            echo "Restored existing feed.xml ($(grep -c '<item>' feed.xml || true) items)"
          else
            echo "No existing feed found (first run?). Starting fresh."
            : > feed.xml
          fi
      
      # 10) Update RSS feed (title = "Month Day Year", description = notes.html)
      - name: Update RSS feed
        env:
          GITHUB_REPOSITORY:   ${{ github.repository }}
          PODCAST_TITLE:       ${{ secrets.PODCAST_TITLE }}
          PODCAST_COVER_URL:   ${{ secrets.PODCAST_COVER_URL }}
          PODCAST_OWNER_NAME:  ${{ secrets.PODCAST_OWNER_NAME }}
          PODCAST_OWNER_EMAIL: ${{ secrets.PODCAST_OWNER_EMAIL }}
          PODCAST_AUTHOR:      ${{ secrets.PODCAST_AUTHOR }}
          PODCAST_CATEGORY:    ${{ secrets.PODCAST_CATEGORY }}
          PODCAST_LANG:        ${{ secrets.PODCAST_LANG }}
        run: |
          python -m src.feed --update --tag "episode-${{ github.run_id }}"

      # 11) Stage site for GitHub Pages (feed at root + simple index + latest notes)
      - name: Prepare feed for Pages
        run: |
          set -euo pipefail
          rm -rf public
          mkdir -p public public/latest
          # classic podcast feed name
          cp feed.xml public/feed.xml
          # optional: expose latest notes for humans
          if [ -f output/notes.html ]; then
            cp output/notes.html public/latest/index.html
          fi
          # simple landing page
          cat > public/index.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>Fintech Daily Briefing</title>
          <h1>Fintech Daily Briefing</h1>
          <p>RSS feed: <a href="./feed.xml">feed.xml</a></p>
          <p>Latest episode notes: <a href="./latest/">latest/</a></p>
          HTML

      # 12) Upload Pages artifact
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4